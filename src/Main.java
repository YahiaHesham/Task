import java.util.Date;

public class Main {

    //only tests where generated by AI
    public static void main(String[] args) {
        // Test case: Create a customer with a balance
        Customer customer = new Customer(200);

        // Test case: Create products
        ShippableProduct phone = new ShippableProduct("Phone", 100, 2, 500); // name, price, quantity, weight
        ExpirableShippableProduct milk = new ExpirableShippableProduct("Milk", 10, 5, new java.util.Date(System.currentTimeMillis() + 86400000),100); // expires in 1 day
        ExpirableShippableProduct vaccine = new ExpirableShippableProduct("Vaccine", 50, 1, new java.util.Date(System.currentTimeMillis() + 86400000), 100); // expires in 1 day, weight 100g

        // Test case: Create cart items
        CartItem item1 = new CartItem(phone, 1);
        CartItem item2 = new CartItem(milk, 2);
        CartItem item3 = new CartItem(vaccine, 1);

        // Test case: Add items to cart
        CartItem[] items = {item1, item2, item3};
        Cart cart = new Cart(items);

        // Test case: Checkout process
        try {
            cart.checkout(customer.balance);
        } catch (Exception e) {
            System.out.println("Checkout failed: " + e.getMessage());
        }

        // Test case: Expired product (should throw exception)
        try {
            ExpirableProduct expiredMilk = new ExpirableProduct("Expired Milk", 5, 1, new java.util.Date(System.currentTimeMillis() - 86400000)); // expired yesterday
            CartItem expiredItem = new CartItem(expiredMilk, 1);
        } catch (Exception e) {
            System.out.println("Expected failure for expired product: " + e.getMessage());
        }

        // Test case: Not enough balance (should throw exception)
        try {
            Customer poorCustomer = new Customer(10);
            cart.checkout(poorCustomer.balance);
        } catch (Exception e) {
            System.out.println("Expected failure for insufficient balance: " + e.getMessage());
        }

        // Test case: Quantity exceeds available (should throw exception)
        try {
            CartItem tooManyPhones = new CartItem(phone, 10); // phone only has quantity 2
        } catch (Exception e) {
            System.out.println("Expected failure for exceeding quantity: " + e.getMessage());
        }
    }
}